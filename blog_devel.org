* Requerimentos
** Post
*** Requerimentos
O sistema deve permitir o CRUD (Create/Retrieve/Update/Delete) de artigos, com os seguintes atributos:
Título, campo texto (requerido, máx. de 255 caracteres)
Corpo, campo texto com múltiplas linhas [textarea] (requerido, máx. de 8191 caractetes)
Autor, campo texto (requerido, máx. de 127 caracteres)
Data de publicação (opcional, formato DD/MM/AAAA), utilizar um Date Picker para facilitar o preenchimento. Ver: http://railscasts.com/episodes/213-calendars
Tags (opcionais) - Utilizar um elemento visual com autocompleter (ver: http://railscasts.com/episodes/258-token-fields). Somente poderão ser selecionadas tags pré-existentes.
Status. Valores válidos: Publicada, Em Revisão ou Rascunho. Utilize radio buttons ou um pull-down.

Comando: rails generate scaffold Post title:string body:text author:string pub_date:date status:integer

exemplo rails generate scaffold -h : post title body:text published:boolean

** Tags
*** Requerimentos
No caso das tags, criar uma entidade à parte, com o respectivo CRUD. O único atributo seria o nome, naturalmente requerido, com limite de 127 caracteres. No Scrum, isto seria uma estória à parte, distinta do CRUD de artigos.
* Descobertas
** RSpec + Generators
Artigos: http://paulbarry.com/articles/2010/01/13/customizing-generators-in-rails-3
http://gembundler.com/
- usar o bundler para gerenciar dependências (>> gem install trololol)

* Documentação
** Rails
Até agora, achei interessantes:
http://guides.rubyonrails.org/getting_started.html - intro com muitas informações, é basicamente o que tô seguindo
http://guides.rubyonrails.org/routing.html - sobre a DSL de roteamento do Rails
http://guides.rubyonrails.org/migrations.html - sobre as migrações do Rails
http://www.packtpub.com/article/working-with-rails-activerecord-migrations-models-scaffolding-and-database-completion - companheiro para o acima
http://overooped.com/post/100354794/ruby-script-generate-scaffold-types - companheiro para scaffolding
http://guides.rubyonrails.org/active_record_validations_callbacks.html#validations-overview - Validações de modelos
http://guides.rubyonrails.org/testing.html - testes no Rails
http://guides.rubyonrails.org/active_record_querying.html - querying no active record (ORM do Rails)
http://guides.rubyonrails.org/form_helpers.html - para criar o select box dos statuses
http://guides.rubyonrails.org/i18n.html - internacionalização em Rails
* Problemas
** rails console: cannot require readline
Solução: http://vvv.tobiassjosten.net/ruby-on-rails/fixing-readline-for-the-ruby-on-rails-console
aparentemente, o ruby não foi compilado com suporte a readline;
precisamos recompilá-lo com essa biblio. Usando um apt-get install
libreadline5-dev, adquirimos a biblioteca
** bundle install: ERROR:  Error installing pg:
    ERROR: Failed to build gem native extension.

        /home/demonchand/.rvm/rubies/ruby-1.9.2-p0/bin/ruby extconf.rb
checking for pg_config... no
No pg_config... trying anyway. If building fails, please try again with
 --with-pg-config=/path/to/pg_config
checking for libpq-fe.h... no
Can't find the 'libpq-fe.h header
Solução: Looks like that header is part of the libpq-dev package (at least in Natty, Lucid and Oneiric, so that covers all currently supported Ubuntus)
** Comparar data e tempo em Ruby: http://olabini.com/blog/2011/01/comparing-times-and-dates-in-ruby/
Solução: to_datetime cast
** Internacionalização
http://guides.rubyonrails.org/i18n.html
** PGError: ERROR:  column classifications.tag_id does not exist
Esse erro aconteceu primeiramente porque migrei sem modificar a
migração criada automaticamente; ou seja, as chaves externas não foram
adicionadas. O problema foi que, após modificar corretamente as
migrações, tentei utilizar o seguinte comando:

#+BEGIN_SRC sh
rake db:reset && rake db:migrate
#+END_SRC

Esse comando, apesar de parecer, NÃO derruba as migrações! O comando
correto para fazê-lo é:

#+BEGIN_SRC sh
rake db:rollback && rake db:migrate
#+END_SRC
** "Publicada? (No/Yes)" @ index.html.erb
tradução com símbolos :yes e :no falha; deve-se utilizar :_yes e :_no
** SyntaxError: reserved word "function" @ posts.js.coffee
Quando introduzi o código abaixo:
#+BEGIN_SRC js
$(document).ready(function () {
    $("#post_tag_tokens").tokenInput("/tags.json", {
        crossDomain: false,
        prePopulate: $("#post_tag_tokens").data("pre"),
        theme: "facebook"
    });
});
#+END_SRC
no arquivo posts.js.coffee, o 'asset pipeline' (o sistema que cuida da
integração e serviço dos arquivos .js) transformava-a em uma chamada
de função:
#+BEGIN_SRC js
$(function () {
 // código incluído em posts.js.coffee
}).call(this);
#+END_SRC
A solução foi mover o código para application.js.coffee, que não
realiza esse pré-processamento dos arquivos.
** Validar chaves externas em posts_tags
Referência: [[http://guides.rubyonrails.org/active_record_validations_callbacks.html#uniqueness][Rails Validations]]
O código seguinte avalia a unicidade de :name em relação a :year:
#+BEGIN_SRC ruby
class Holiday < ActiveRecord::Base
  validates :name, :uniqueness => { :scope => :year,
    :message => "should happen once per year" }
end
#+END_SRC
** Adicionar chave estrangeira dupla na migração 'PostsTags'
Observar os métodos em [[http://api.rubyonrails.org/classes/ActiveRecord/Migration.html][ActiveRecord::Migration]]:
#+BEGIN_SRC ruby
def up
  add_index :posts_tags, [:post_id, :tag_id], :unique => true
end
def down
  remove_index :posts_tags, :column => [:post_id, :tag_id]
end
#+END_SRC
** Adicionar Rake tasks à aplicação Rails
Todos os arquivos .rake na pasta lib/tasks são lidos e adicionados à
lista de tasks; isso ajuda bastante a criar, por exemplo, um script
para execução de benchmarks (como foi o caso).
Uma documentação interessante para os Rakefiles é a do seu [[http://rake.rubyforge.org/files/doc/rakefile_rdoc.html][RubyForge]],
que conta com o essencial para desenvolver Rake tasks razoáveis.
Também é interessante checar os métodos de [[http://ruby-doc.org/stdlib-1.9.3/libdoc/fileutils/rdoc/FileUtils.html][FileUtils]] para realizar
operações com arquivos.
* RSpec e BDD
OK, pelo que eu entendi, RSpec segue a idéia do BDD, que é uma
metodologia de desenvolvimento evoluída a partir do TDD. Os testes são
escritos buscando legibilidade por um usuário não-técnico (inclusive,
o framework Cucumber conta com 'estórias executáveis'), e focam mais
no comportamento do programa ("it should...") - o que determina um
'teste contextualizado'.
